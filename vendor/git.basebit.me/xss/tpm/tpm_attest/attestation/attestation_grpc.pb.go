// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: attestation/attestation.proto

package attestation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttestationClient is the client API for Attestation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationClient interface {
	GetCerts(ctx context.Context, in *GetCertsRequest, opts ...grpc.CallOption) (*GetCertsResponse, error)
	GetAK(ctx context.Context, in *GetAKRequest, opts ...grpc.CallOption) (*GetAKResponse, error)
	Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error)
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	ShareSecret(ctx context.Context, in *ShareSecretRequest, opts ...grpc.CallOption) (*ShareSecretResponse, error)
}

type attestationClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationClient(cc grpc.ClientConnInterface) AttestationClient {
	return &attestationClient{cc}
}

func (c *attestationClient) GetCerts(ctx context.Context, in *GetCertsRequest, opts ...grpc.CallOption) (*GetCertsResponse, error) {
	out := new(GetCertsResponse)
	err := c.cc.Invoke(ctx, "/attestation.Attestation/GetCerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClient) GetAK(ctx context.Context, in *GetAKRequest, opts ...grpc.CallOption) (*GetAKResponse, error) {
	out := new(GetAKResponse)
	err := c.cc.Invoke(ctx, "/attestation.Attestation/GetAK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClient) Challenge(ctx context.Context, in *ChallengeRequest, opts ...grpc.CallOption) (*ChallengeResponse, error) {
	out := new(ChallengeResponse)
	err := c.cc.Invoke(ctx, "/attestation.Attestation/Challenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, "/attestation.Attestation/GetQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationClient) ShareSecret(ctx context.Context, in *ShareSecretRequest, opts ...grpc.CallOption) (*ShareSecretResponse, error) {
	out := new(ShareSecretResponse)
	err := c.cc.Invoke(ctx, "/attestation.Attestation/ShareSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationServer is the server API for Attestation service.
// All implementations must embed UnimplementedAttestationServer
// for forward compatibility
type AttestationServer interface {
	GetCerts(context.Context, *GetCertsRequest) (*GetCertsResponse, error)
	GetAK(context.Context, *GetAKRequest) (*GetAKResponse, error)
	Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error)
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	ShareSecret(context.Context, *ShareSecretRequest) (*ShareSecretResponse, error)
	mustEmbedUnimplementedAttestationServer()
}

// UnimplementedAttestationServer must be embedded to have forward compatible implementations.
type UnimplementedAttestationServer struct {
}

func (UnimplementedAttestationServer) GetCerts(context.Context, *GetCertsRequest) (*GetCertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCerts not implemented")
}
func (UnimplementedAttestationServer) GetAK(context.Context, *GetAKRequest) (*GetAKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAK not implemented")
}
func (UnimplementedAttestationServer) Challenge(context.Context, *ChallengeRequest) (*ChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Challenge not implemented")
}
func (UnimplementedAttestationServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedAttestationServer) ShareSecret(context.Context, *ShareSecretRequest) (*ShareSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareSecret not implemented")
}
func (UnimplementedAttestationServer) mustEmbedUnimplementedAttestationServer() {}

// UnsafeAttestationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationServer will
// result in compilation errors.
type UnsafeAttestationServer interface {
	mustEmbedUnimplementedAttestationServer()
}

func RegisterAttestationServer(s grpc.ServiceRegistrar, srv AttestationServer) {
	s.RegisterService(&Attestation_ServiceDesc, srv)
}

func _Attestation_GetCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServer).GetCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation.Attestation/GetCerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServer).GetCerts(ctx, req.(*GetCertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attestation_GetAK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServer).GetAK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation.Attestation/GetAK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServer).GetAK(ctx, req.(*GetAKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attestation_Challenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServer).Challenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation.Attestation/Challenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServer).Challenge(ctx, req.(*ChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attestation_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation.Attestation/GetQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attestation_ShareSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServer).ShareSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attestation.Attestation/ShareSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServer).ShareSecret(ctx, req.(*ShareSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Attestation_ServiceDesc is the grpc.ServiceDesc for Attestation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attestation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attestation.Attestation",
	HandlerType: (*AttestationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCerts",
			Handler:    _Attestation_GetCerts_Handler,
		},
		{
			MethodName: "GetAK",
			Handler:    _Attestation_GetAK_Handler,
		},
		{
			MethodName: "Challenge",
			Handler:    _Attestation_Challenge_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _Attestation_GetQuote_Handler,
		},
		{
			MethodName: "ShareSecret",
			Handler:    _Attestation_ShareSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attestation/attestation.proto",
}
